import { useEffect, useState } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { ethers } from 'ethers'

import useWeb3 from '../lib/useWeb3'
import { getArbitrators } from '../lib/db/queries'
import CentralizedArbitrator from '../smart-contract-abi/CentralizedAppealableArbitrator.json'
import { Button } from '../components/Button'
import { SelectNetwork } from '../components/SelectNetwork'
import { NETWORKS_LIST, CHAINS_ID_TO_NETWORKS_LIST } from '../constants/networksList'

export default function Home({ arbitrators }) {
  const router = useRouter()

  const {
    chainIdUsed,
    accounts,
    connectWallet
  } = useWeb3()

  const [isConnectedWeb3, setIsConnectedWeb3] = useState(false)
  const [networkSelected, setNetworkSelected] = useState([])
  const [networkNameUsed, setNetworkNameUsed] = useState(null)
  const [arbitratorPriceEth, setArbitratorPriceEth] = useState('0.02')
  const [rulingTimeSeconds, setRulingTimeSeconds] = useState('180')
  const [arbitratorAddress, setArbitratorAddress] = useState('')
  const [arbitratorDescription, setArbitratorDescription] = useState('')
  const [isDisabledButton, setIsDisabledButton] = useState(true)
  const [isLoading, setIsLoading]  = useState(false)

  const PRIVATE_KEY_DEPLOYER = process.env.NEXT_PUBLIC_PRIVATE_KEY_DEPLOYER
  const GOERLI_PROVIDER_URL = process.env.NEXT_PUBLIC_GOERLI_PROVIDER_URL
  const SOKOL_PROVIDER_URL = process.env.NEXT_PUBLIC_SOKOL_PROVIDER_URL
  const MUMBAI_PROVIDER_URL = process.env.NEXT_PUBLIC_MUMBAI_PROVIDER_URL

  // refresh props!
  const refreshData = () => {
    router.replace(router.asPath)
  }

  useEffect(() => {
    if (accounts.length > 0) {
      setIsConnectedWeb3(true)
      setIsDisabledButton(false)
      setArbitratorAddress(accounts[0])
    }

    setNetworkNameUsed(CHAINS_ID_TO_NETWORKS_LIST[parseInt(chainIdUsed)] || '')
    if (networkNameUsed) setIsDisabledButton(false)
  }, [accounts, chainIdUsed])

  const createArbitrator = async arbitrator => {
    const res = await fetch(`/api/arbitrator`, {
      method: 'POST',
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(arbitrator),
    })

    return res
  }

  const handleNetworkSwitch = async () => {
    if (!NETWORKS_LIST[networkSelected]?.chainId) return

    try {
      await window.ethereum.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: NETWORKS_LIST[networkSelected].chainId }]
      })

    } catch (error) {
      console.error(`Error request wallet_switchEthereumChain method.`)
    }

    connectWallet()
  }

  const handleGenerateArbitrator = async () => {
    if (arbitratorPriceEth === '' || rulingTimeSeconds === '') {
      return
    }
    const provider = new ethers.providers.JsonRpcProvider(eval(`${networkSelected.toUpperCase()}_PROVIDER_URL`))

    const signer = new ethers.Wallet(PRIVATE_KEY_DEPLOYER, provider)

    const arbitratorPriceWei = BigInt(Number(ethers.utils.parseEther(arbitratorPriceEth))).toString()
 
    const factory = new ethers.ContractFactory(CentralizedArbitrator.abi, CentralizedArbitrator.bytecode, signer)
    const contract = await factory.deploy(arbitratorPriceWei, rulingTimeSeconds)
    
    setIsLoading(true)
    const receiptArbitrator = await contract.deployTransaction.wait()
    setIsLoading(false)

    const arbitrator = {
      contract_address: receiptArbitrator.contractAddress,
      arbitrator_network: networkSelected,
      arbitrator_price: arbitratorPriceWei,
      ruling_time: rulingTimeSeconds,
      arbitrator_address: arbitratorAddress,
      arbitrator_description: arbitratorDescription
    }

    const { status } = createArbitrator(arbitrator)
    if (status < 300) refreshData()
  }

  return (
    <>
      <Head>
        <title>Create Arbitrator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 className="text-center pt-3">POC Generate Arbitrator</h1>
        {!isConnectedWeb3
          ? <Button
            className="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-5 py-2 bg-yellow-500 text-base font-medium text-white hover:bg-yellow-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 sm:text-sm mx-40 my-5"
            action={connectWallet}
            content="Connect to Web3"
            />
          : ''
        }
        <div className={`flex flex-wrap flex-row place-items-center mx-[189px] ${isConnectedWeb3 ? 'mt-[78px]' : ''}`}>
          <div className="w-screen ml-[80%]">
            <SelectNetwork
              network={networkSelected}
              setNetwork={value => setNetworkSelected(value)}
            />
          </div>
          <div className="w-screen pb-3 mr-[30%]">
            <label htmlFor="name" className="block text-xs text-[#2B2B2B]">Arbitrator Address</label>
            <div className="flex mt-1 relative rounded-md">
              <input
                type="text"
                className="text-xs flex-1 appearance-none border rounded py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-[#008DEB] focus:border-transparent"
                onChange={e => setArbitratorAddress(e.target.value)}
                value={arbitratorAddress}
              />
            </div>
          </div>
          <div className="w-screen pb-3 mr-[30%]">
            <label htmlFor="symbol" className="block text-xs text-[#2B2B2B]">Arbitrator Price (ETH)</label>
            <div className="flex mt-1 relative rounded-md">
              <input
                type="text"
                className="text-xs flex-1 appearance-none border rounded py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-[#008DEB] focus:border-transparent"
                onChange={e => setArbitratorPriceEth(e.target.value)}
                value={arbitratorPriceEth}
              />
            </div> 
          </div>
          <div className="w-screen pb-3 mr-[30%]">
            <label htmlFor="supply" className="block text-xs text-[#2B2B2B]">Ruling Time (seconds)</label>
            <div className="flex mt-1 relative rounded-md">
              <input
                type="text"
                className="text-xs flex-1 appearance-none border rounded py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-[#008DEB] focus:border-transparent"
                onChange={e => setRulingTimeSeconds(e.target.value)}
                value={rulingTimeSeconds}
              />
            </div>
          </div>
          <div className="w-screen pb-3 mr-[30%]">
            <label htmlFor="description" className="block text-xs text-[#2B2B2B]">Arbitrator Description</label>
            <div className="flex mt-1 relative rounded-md">
              <textarea
                name="description"
                rows="2"
                className="text-xs flex-1 appearance-none border rounded py-2 px-3 leading-tight focus:outline-none focus:ring-2 focus:ring-[#008DEB] focus:border-transparent"
                onChange={e => setArbitratorDescription(e.target.value)}
                value={arbitratorDescription}
              />
            </div>
          </div>
          {networkNameUsed === networkSelected
            ? <Button
                className="inline-flex justify-center w-[250px] rounded-md border border-transparent shadow-sm px-10 py-2 bg-blue-500 text-base font-medium text-white hover:bg-blue-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:text-sm"
                action={handleGenerateArbitrator}
                content={isLoading ? (<><svg className="animate-spin -ml-6 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Generate Arbitrator</>) : "Submit"}
                isDisabled={isDisabledButton}
              />
            : isConnectedWeb3
              ? <Button
                  className="inline-flex justify-center w-[250px] rounded-md border border-transparent shadow-sm px-10 py-2 bg-blue-500 text-base font-medium text-white hover:bg-blue-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:text-sm"
                  action={handleNetworkSwitch}
                  content={`Switch network ${networkSelected}`}
                  isDisabled={isDisabledButton}
                />
              : ''
          }
        </div>
        <div className="p-5">
          <div className="overflow-x-auto">
            <table className="table-auto w-full">
              <thead className="text-xs font-semibold uppercase text-gray-400 bg-gray-50">
                <tr>
                  <th className="p-2 whitespace-nowrap">
                    <div className="font-semibold text-center">Smart Contract Arbitrator</div>
                  </th>
                  <th className="p-2 whitespace-nowrap">
                    <div className="font-semibold text-center">Network</div>
                  </th>
                  <th className="p-2 whitespace-nowrap">
                    <div className="font-semibold text-center">Address</div>
                  </th>
                  <th className="p-2 whitespace-nowrap">
                    <div className="font-semibold text-center">Ruling Time (s)</div>
                  </th>
                  <th className="p-2 whitespace-nowrap">
                    <div className="font-semibold text-center">Price (ETH)</div>
                  </th>
                </tr>
              </thead>
              <tbody className="text-sm divide-y divide-gray-100">
                {arbitrators && arbitrators.length > 0 && arbitrators.map((arbitrator, i) => 
                  <tr key={i}>
                    <td className="p-2 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-1 text-center font-medium text-gray-800">
                          <a
                            href={`${NETWORKS_LIST[arbitrator.arbitrator_network].blockExplorerUrls}/address/${arbitrator.contract_address}`}
                            className="underline text-blue-800 mr-3"
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            ↗️
                          </a>
                          {`${arbitrator.contract_address.substring(0, 12)}...${arbitrator.contract_address.substring(arbitrator.contract_address.length - 5)}`}
                        </div>
                      </div>
                    </td>
                    <td className="p-2 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-1 text-center font-medium text-gray-800">{arbitrator.arbitrator_network}</div>
                      </div>
                    </td>
                    <td className="p-2 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-1 text-center font-medium text-gray-800">
                          {`${arbitrator.arbitrator_address.substring(0, 6)}...${arbitrator.arbitrator_address.substring(arbitrator.arbitrator_address.length - 5)}`}
                        </div>
                      </div>
                    </td>
                    <td className="p-2 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-1 text-center font-medium text-gray-800">{arbitrator.ruling_time}</div>
                      </div>
                    </td>
                    <td className="p-2 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-1 text-center font-medium text-gray-800">
                          {`${parseFloat(ethers.utils.formatEther(arbitrator.arbitrator_price))}`}
                        </div>
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </main>
    </>
  )
}

export const getServerSideProps = async () => {
  const arbitrators = await getArbitrators()

  return {
    props: {
      arbitrators: JSON.parse(JSON.stringify(arbitrators)),
    },
  }
}
